import { useState, useEffect, useRef } from 'react';

function App() {
  // Array ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ 10 ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ (20-40 ‡∏Ñ‡∏≥)
  const sentences = [
    // ~20 ‡∏Ñ‡∏≥
    "The quick brown fox jumps over the lazy dog while the sun shines brightly in the clear blue sky above.",
    
    // ~22 ‡∏Ñ‡∏≥
    "Technology has revolutionized the way we communicate, work, and live our daily lives in the modern digital age we inhabit today.",
    
    // ~25 ‡∏Ñ‡∏≥
    "Ancient civilizations built magnificent structures that continue to amaze archaeologists and historians who study their remarkable achievements and cultural legacy throughout human history.",
    
    // ~27 ‡∏Ñ‡∏≥
    "Climate change presents one of the greatest challenges facing humanity today, requiring immediate action from governments, businesses, and individuals to protect our planet for future generations.",
    
    // ~30 ‡∏Ñ‡∏≥
    "The art of cooking combines creativity, science, and tradition as chefs experiment with flavors, techniques, and ingredients from around the world to create memorable dining experiences.",
    
    // ~32 ‡∏Ñ‡∏≥
    "Space exploration has always captured human imagination, inspiring scientists and engineers to push the boundaries of what is possible as we venture beyond Earth to discover new worlds.",
    
    // ~35 ‡∏Ñ‡∏≥
    "Education plays a fundamental role in shaping society by providing individuals with knowledge, critical thinking skills, and opportunities to pursue their dreams while contributing positively to their communities and the world.",
    
    // ~37 ‡∏Ñ‡∏≥
    "The ocean covers more than seventy percent of Earth's surface and remains largely unexplored, containing countless species of marine life and holding secrets that could help us understand our planet's history.",
    
    // ~38 ‡∏Ñ‡∏≥
    "Music has the power to transcend cultural boundaries, evoke emotions, and bring people together regardless of their background, language, or beliefs, creating universal connections through rhythm, melody, and shared human experiences.",
    
    // ~40 ‡∏Ñ‡∏≥
    "Artificial intelligence and machine learning technologies are rapidly transforming industries, creating new opportunities for innovation while also raising important questions about ethics, privacy, and the future of human work in an increasingly automated world."
  ];

  // State ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
  const [currentSentence, setCurrentSentence] = useState('');
  const [userInput, setUserInput] = useState('');
  const [timeElapsed, setTimeElapsed] = useState(0);
  const [gameStatus, setGameStatus] = useState('idle'); // 'idle', 'playing', 'finished'
  const [startTime, setStartTime] = useState(null);
  
  // State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
  const [correctChars, setCorrectChars] = useState(0);
  const [incorrectChars, setIncorrectChars] = useState(0);
  const [accuracy, setAccuracy] = useState(100);

  // Ref ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö textarea ‡πÅ‡∏•‡∏∞ timer
  const textareaRef = useRef(null);
  const timerRef = useRef(null);

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏∏‡πà‡∏°‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ
  const getRandomSentence = () => {
    const randomIndex = Math.floor(Math.random() * sentences.length);
    return sentences[randomIndex];
  };

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°
  const startGame = () => {
    const newSentence = getRandomSentence();
    setCurrentSentence(newSentence);
    setUserInput('');
    setTimeElapsed(0);
    setGameStatus('playing');
    setStartTime(Date.now());
    // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï state ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö
    setCorrectChars(0);
    setIncorrectChars(0);
    setAccuracy(100);
  };

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏°‡∏û‡πå
  const handleInputChange = (e) => {
    const newInput = e.target.value;
    
    // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏Å‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ
    if (newInput.length <= currentSentence.length) {
      setUserInput(newInput);
      compareText(newInput);
    }
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÑ‡∏Æ‡πÑ‡∏•‡∏ï‡πå
  const renderHighlightedText = () => {
    if (!currentSentence) return null;

    return currentSentence.split('').map((char, index) => {
      let className = 'inline-block';
      
      if (index < userInput.length) {
        // ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ó‡∏µ‡πà‡∏û‡∏¥‡∏°‡∏û‡πå‡πÅ‡∏•‡πâ‡∏ß
        if (userInput[index] === char) {
          className += ' bg-green-200 text-green-800'; // ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á - ‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß
        } else {
          className += ' bg-red-200 text-red-800'; // ‡∏ú‡∏¥‡∏î - ‡∏™‡∏µ‡πÅ‡∏î‡∏á
        }
      } else if (index === userInput.length) {
        // ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏∞‡∏û‡∏¥‡∏°‡∏û‡πå
        className += ' bg-blue-300 text-blue-900 animate-pulse'; // ‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô ‡∏Å‡∏£‡∏∞‡∏û‡∏£‡∏¥‡∏ö
      } else {
        // ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏û‡∏¥‡∏°‡∏û‡πå
        className += ' text-gray-600'; // ‡∏™‡∏µ‡πÄ‡∏ó‡∏≤
      }

      return (
        <span key={index} className={className}>
          {char === ' ' ? '\u00A0' : char}
        </span>
      );
    });
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó state
  const compareText = (input) => {
    let correct = 0;
    let incorrect = 0;
    
    for (let i = 0; i < input.length; i++) {
      if (i < currentSentence.length) {
        if (input[i] === currentSentence[i]) {
          correct++;
        } else {
          incorrect++;
        }
      } else {
        // ‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏Å‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ
        incorrect++;
      }
    }
    
    setCorrectChars(correct);
    setIncorrectChars(incorrect);
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥
    const totalChars = correct + incorrect;
    const accuracyPercent = totalChars > 0 ? (correct / totalChars) * 100 : 100;
    setAccuracy(accuracyPercent);
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏™‡∏£‡πá‡∏à‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
    if (input.length === currentSentence.length && correct === currentSentence.length) {
      setGameStatus('finished');
      // ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏ß‡∏•‡∏≤
      if (timerRef.current) {
        clearInterval(timerRef.current);
        timerRef.current = null;
      }
    }
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ key events ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô copy-paste
  const handleKeyDown = (e) => {
    // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô backspace ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡πÉ‡∏´‡πâ‡∏•‡∏ö
    if (e.key === 'Backspace' && userInput.length === 0) {
      e.preventDefault();
    }
    
    // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏°‡∏û‡πå‡∏≠‡∏±‡∏Å‡∏Ç‡∏£‡∏∞‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏ö‡∏≤‡∏á‡∏ï‡∏±‡∏ß
    if (e.key === 'Tab') {
      e.preventDefault();
    }

    // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô Ctrl+V (paste), Ctrl+C (copy), Ctrl+A (select all), Ctrl+X (cut)
    if (e.ctrlKey || e.metaKey) {
      if (e.key === 'v' || e.key === 'V' || 
          e.key === 'c' || e.key === 'C' || 
          e.key === 'a' || e.key === 'A' ||
          e.key === 'x' || e.key === 'X') {
        e.preventDefault();
      }
    }
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô context menu (right-click)
  const handleContextMenu = (e) => {
    e.preventDefault();
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô paste event
  const handlePaste = (e) => {
    e.preventDefault();
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô copy event
  const handleCopy = (e) => {
    e.preventDefault();
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô cut event
  const handleCut = (e) => {
    e.preventDefault();
  };

  // useEffect ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö focus textarea ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°
  useEffect(() => {
    if (gameStatus === 'playing' && textareaRef.current) {
      setTimeout(() => {
        textareaRef.current.focus();
      }, 100);
    }
  }, [gameStatus]);

  // useEffect ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤
  useEffect(() => {
    if (gameStatus === 'playing') {
      // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤
      timerRef.current = setInterval(() => {
        if (startTime) {
          const currentTime = Date.now();
          const elapsed = (currentTime - startTime) / 1000; // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
          setTimeElapsed(elapsed);
        }
      }, 100); // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏ó‡∏∏‡∏Å 100ms ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥

      // Cleanup function
      return () => {
        if (timerRef.current) {
          clearInterval(timerRef.current);
          timerRef.current = null;
        }
      };
    } else {
      // ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡πà‡∏ô
      if (timerRef.current) {
        clearInterval(timerRef.current);
        timerRef.current = null;
      }
    }
  }, [gameStatus, startTime]);

  // useEffect ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö cleanup ‡πÄ‡∏°‡∏∑‡πà‡∏≠ component unmount
  useEffect(() => {
    return () => {
      if (timerRef.current) {
        clearInterval(timerRef.current);
      }
    };
  }, []);

  return (
    <div className="min-h-screen bg-black p-5">
      <div className="max-w-4xl mx-auto bg-white rounded-xl shadow-2xl overflow-hidden">
        
        {/* Header */}
        <div className="bg-blue-700 text-white text-center py-8 px-6">
          <h1 className="text-4xl font-bold mb-3">üöÄ Typing Speed Test</h1>
          <p className="text-lg opacity-90">‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡πá‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î!</p>
        </div>

        {/* Main Content */}
        <div className="p-8 space-y-8">
          
          {/* Timer and Stats Section */}
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-center">
            <div className="bg-gray-50 border-2 border-gray-200 rounded-lg px-4 py-3">
              <span className="text-gray-600 text-sm block">‡πÄ‡∏ß‡∏•‡∏≤</span>
              <span className="text-2xl font-bold text-gray-800">{timeElapsed.toFixed(1)}s</span>
            </div>
            <div className="bg-green-50 border-2 border-green-200 rounded-lg px-4 py-3">
              <span className="text-green-600 text-sm block">‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥</span>
              <span className="text-2xl font-bold text-green-800">{accuracy.toFixed(1)}%</span>
            </div>
            <div className="bg-blue-50 border-2 border-blue-200 rounded-lg px-4 py-3">
              <span className="text-blue-600 text-sm block">‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤</span>
              <span className="text-2xl font-bold text-blue-800">
                {currentSentence ? `${userInput.length}/${currentSentence.length}` : '0/0'}
              </span>
            </div>
          </div>

          {/* Sentence Display */}
          <div className="bg-gray-50 border-2 border-gray-200 rounded-lg p-6 min-h-[120px] flex items-center justify-center select-none">
            {currentSentence ? (
              <div className="w-full">
                <div className="text-lg leading-relaxed text-justify">
                  {gameStatus === 'playing' ? renderHighlightedText() : (
                    <span className="text-gray-700">{currentSentence}</span>
                  )}
                </div>
                <div className="mt-3 text-right">
                  <span className="text-sm text-gray-500 bg-gray-200 px-2 py-1 rounded">
                    {currentSentence.split(' ').length} words
                  </span>
                </div>
              </div>
            ) : (
              <p className="text-xl text-gray-500 text-center">
                ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ
              </p>
            )}
          </div>

          {/* Input Section */}
          <div>
            <textarea
              ref={textareaRef}
              className="w-full p-4 text-lg border-2 border-gray-200 rounded-lg resize-none focus:border-indigo-500 focus:ring-2 focus:ring-indigo-200 focus:outline-none disabled:bg-gray-50 disabled:text-gray-400 disabled:cursor-not-allowed transition-all"
              placeholder="‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà..."
              value={userInput}
              onChange={handleInputChange}
              onKeyDown={handleKeyDown}
              onContextMenu={handleContextMenu}
              onPaste={handlePaste}
              onCopy={handleCopy}
              onCut={handleCut}
              disabled={gameStatus === 'idle' || gameStatus === 'finished'}
              rows={4}
              autoComplete="off"
              spellCheck="false"
            />
            
            {/* ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏°‡∏û‡πå */}
            {gameStatus === 'playing' && (
              <div className="mt-2 flex justify-between text-sm">
                <span className="text-green-600">
                  ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: {correctChars} ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
                </span>
                <span className="text-red-600">
                  ‡∏ú‡∏¥‡∏î: {incorrectChars} ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
                </span>
                <span className="text-blue-600">
                  ‡πÄ‡∏´‡∏•‡∏∑‡∏≠: {currentSentence.length - userInput.length} ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
                </span>
              </div>
            )}
          </div>

          {/* Control Section */}
          <div className="text-center">
            <button 
              className={`px-8 py-3 text-lg font-semibold rounded-lg transition-all transform hover:-translate-y-0.5 hover:shadow-lg min-w-[150px] ${
                gameStatus === 'playing' 
                  ? 'bg-amber-500 hover:bg-amber-600 text-white cursor-not-allowed' 
                  : gameStatus === 'finished'
                  ? 'bg-green-500 hover:bg-green-600 text-white hover:shadow-green-200'
                  : 'bg-green-500 hover:bg-green-600 text-white hover:shadow-green-200'
              } disabled:bg-gray-400 disabled:cursor-not-allowed disabled:transform-none disabled:shadow-none`}
              onClick={startGame}
              disabled={gameStatus === 'playing'}
            >
              {gameStatus === 'playing' ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô...' : 
               gameStatus === 'finished' ? '‡πÄ‡∏•‡πà‡∏ô‡πÉ‡∏´‡∏°‡πà' : '‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°'}
            </button>
          </div>

          {/* Status Section */}
          <div className="bg-gray-50 border border-gray-200 rounded-lg p-4 text-center">
            <span className="text-gray-600 mr-3">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:</span>
            <span className={`font-semibold px-3 py-1 rounded-full text-sm ${
              gameStatus === 'idle' ? 'bg-gray-200 text-gray-700' :
              gameStatus === 'playing' ? 'bg-amber-100 text-amber-800' :
              'bg-green-100 text-green-800'
            }`}>
              {gameStatus === 'idle' && '‡∏£‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°'}
              {gameStatus === 'playing' && '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô'}
              {gameStatus === 'finished' && '‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô'}
            </span>
            
            {/* Result Section */}
            {gameStatus === 'finished' && (
              <div className="mt-3 p-3 bg-green-50 border border-green-200 rounded-lg">
                <div className="text-green-800 font-semibold">‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö:</div>
                <div className="grid grid-cols-2 gap-4 mt-2 text-sm">
                  <div>‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥: <span className="font-bold">{accuracy.toFixed(1)}%</span></div>
                  <div>‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ: <span className="font-bold">{timeElapsed.toFixed(1)} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ</span></div>
                  <div>‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ñ‡∏π‡∏Å: <span className="font-bold text-green-600">{correctChars}</span></div>
                  <div>‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ú‡∏¥‡∏î: <span className="font-bold text-red-600">{incorrectChars}</span></div>
                </div>
              </div>
            )}
          </div>

        </div>
      </div>
    </div>
  );
}

export default App;

// Task 6 - ‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô Copy-Paste

// 1. Event Handlers ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô:
// - onPaste={handlePaste} - ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô paste
// - onCopy={handleCopy} - ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô copy
// - onCut={handleCut} - ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô cut
// - onContextMenu={handleContextMenu} - ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô right-click

// 2. Keyboard Shortcuts ‡∏ó‡∏µ‡πà‡∏ö‡∏•‡πá‡∏≠‡∏Ñ:
// - Ctrl+V / Cmd+V - Paste
// - Ctrl+C / Cmd+C - Copy
// - Ctrl+X / Cmd+X - Cut
// - Ctrl+A / Cmd+A - Select All

// 3. CSS Class & Attributes ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô:
// - select-none - ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
// - autoComplete="off" - ‡∏õ‡∏¥‡∏î autocomplete
// - spellCheck="false" - ‡∏õ‡∏¥‡∏î spell check